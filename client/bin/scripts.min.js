!function e(t,n,r){function o(u,i){if(!n[u]){if(!t[u]){var l="function"==typeof require&&require;if(!i&&l)return l(u,!0);if(a)return a(u,!0);var c=new Error("Cannot find module '"+u+"'");throw c.code="MODULE_NOT_FOUND",c}var f=n[u]={exports:{}};t[u][0].call(f.exports,function(e){var n=t[u][1][e];return o(n?n:e)},f,f.exports,e,t,n,r)}return n[u].exports}for(var a="function"==typeof require&&require,u=0;u<r.length;u++)o(r[u]);return o}({1:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=e("react"),c=r(l),f=e("./components/Myheader"),s=r(f),p=e("./components/ButtonPanel"),y=r(p),b=e("./components/Overlay"),d=r(b),v=function(e){function t(e){o(this,t);var n=a(this,Object.getPrototypeOf(t).call(this,e));return n.state={text:n.props.data,overlay:!1,buttonNum:0},n.inputChanged=n.inputChanged.bind(n),n.toggleOverlay=n.toggleOverlay.bind(n),n}return u(t,e),i(t,[{key:"inputChanged",value:function(e){this.setState({text:e.target.value})}},{key:"toggleOverlay",value:function(e){this.setState({overlay:!this.state.overlay,buttonNum:e+1})}},{key:"render",value:function(){return c["default"].createElement("div",null,c["default"].createElement(s["default"],{values:this.state.text}),c["default"].createElement("p",null,"Your Input: ",this.state.text),c["default"].createElement("input",{type:"text",value:this.state.text,placeholder:"a placeholder",onChange:this.inputChanged}),c["default"].createElement(y["default"],{values:this.state.text,toggleOverlay:this.toggleOverlay}),c["default"].createElement(d["default"],{show:this.state.overlay,num:this.state.buttonNum,toggleOverlay:this.toggleOverlay}))}}]),t}(c["default"].Component);n["default"]=v},{"./components/ButtonPanel":3,"./components/Myheader":5,"./components/Overlay":7,react:"react"}],2:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}var o=e("react"),a=r(o),u=e("react-dom"),i=r(u),l=e("./Layout"),c=r(l),f="Testing ES6 Features",s=function(){return console.log(f)};s();var p="a sample string",y=document.getElementById("app");i["default"].render(a["default"].createElement(c["default"],{data:p}),y)},{"./Layout":1,react:"react","react-dom":"react-dom"}],3:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=e("react"),c=r(l),f=e("./Mybutton"),s=r(f),p=["btn-danger","btn-success","btn-warning","btn-info","btn-primary","btn-blog","btn-default"],y=function(e){function t(e){return o(this,t),a(this,Object.getPrototypeOf(t).call(this,e))}return u(t,e),i(t,[{key:"render",value:function(){var e=this,t=this.props.values.split(" ").map(function(t,n){return c["default"].createElement(s["default"],{value:t,key:n,callback:function(){return e.props.toggleOverlay(n)},"class":p[n%p.length]})});return c["default"].createElement("div",null,t)}}]),t}(c["default"].Component);n["default"]=y},{"./Mybutton":4,react:"react"}],4:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=e("react"),c=r(l),f=function(e){function t(e){return o(this,t),a(this,Object.getPrototypeOf(t).call(this,e))}return u(t,e),i(t,[{key:"render",value:function(){return c["default"].createElement("div",{className:"inline"},c["default"].createElement("button",{className:"btn "+this.props["class"],onClick:this.props.callback},this.props.value))}}]),t}(c["default"].Component);n["default"]=f},{react:"react"}],5:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=e("react"),c=r(l),f=e("./Mynav"),s=r(f),p=function(e){function t(e){o(this,t);var n=a(this,Object.getPrototypeOf(t).call(this,e));return n.state={active:0},n.navClicked=n.navClicked.bind(n),n}return u(t,e),i(t,[{key:"navClicked",value:function(e){var t=this;return function(n){return t.setState({active:e})}}},{key:"render",value:function(){var e=this,t=this.props.values.split(" ").map(function(t,n){return c["default"].createElement(s["default"],{key:n,active:n==e.state.active,value:t,callback:e.navClicked(n)})});return c["default"].createElement("nav",{className:"navbar navbar-default"},c["default"].createElement("ul",{className:"nav navbar-nav"},t))}}]),t}(c["default"].Component);n["default"]=p},{"./Mynav":6,react:"react"}],6:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=e("react"),c=r(l),f=function(e){function t(e){return o(this,t),a(this,Object.getPrototypeOf(t).call(this,e))}return u(t,e),i(t,[{key:"render",value:function(){return c["default"].createElement("li",{className:this.props.active?"active":""},c["default"].createElement("a",{href:"javascript:void(0)",onClick:this.props.callback},this.props.value))}}]),t}(c["default"].Component);n["default"]=f},{react:"react"}],7:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=e("react"),c=r(l),f=function(e){function t(e){return o(this,t),a(this,Object.getPrototypeOf(t).call(this,e))}return u(t,e),i(t,[{key:"render",value:function(){var e={display:this.props.show?"block":"none",textAlign:"center"};return c["default"].createElement("div",{className:"hire-us__overlay",style:e},c["default"].createElement("a",{className:"btn btn--primary",href:"javascript:void(0)",onClick:this.props.toggleOverlay},"Close Screen Opened by Button: ",this.props.num))}}]),t}(c["default"].Component);n["default"]=f},{react:"react"}]},{},[2]);
//# sourceMappingURL=data:application/json;base64,
